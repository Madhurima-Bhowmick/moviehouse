{"version":3,"sources":["Header.js","requests.js","Nav.js","VideoCard.js","axios.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","API_KEY","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMystery","fetchSciFi","fetchWestern","fetchAnimation","fetchTV","Nav","setSelectedOption","onClick","requests","fetchRomancenMovies","VideoCard","forwardRef","ref","movie","backdrop_path","poster_path","line","element","truncateText","text","overview","title","original_title","media_type","release_date","first_air_date","vote_count","instance","axios","create","baseURL","Results","selectedOption","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b97deec8.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\nimport HomeIcon from '@material-ui/icons/Home';\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\n\nfunction Header() {\n    return (\n      <div className=\"header\">\n        <div className=\"header__icons\">\n          <div className=\"header__icon header__icon--active\">\n            <HomeIcon />\n            <p>HOME</p>\n          </div>\n          <div className=\"header__icon\">\n            <FlashOnIcon />\n            <p>TRENDING</p>\n          </div>\n          <div className=\"header__icon\">\n            <LiveTvIcon />\n            <p>VERIFIED</p>\n          </div>\n          <div className=\"header__icon\">\n            <VideoLibraryIcon />\n            <p>COLLECTIONS</p>\n          </div>\n          <div className=\"header__icon\">\n            <SearchIcon />\n            <p>SEARCH</p>\n          </div>\n          <div className=\"header__icon\">\n            <PermIdentityIcon />\n            <p>ACCOUNT</p>\n          </div>\n        </div>\n        <img\n          src=\"https://www.moviehouse.co.uk/content/images/logo-moviehouse.png\"\n          alt=\"logo\"\n        />\n      </div>\n    );\n}\n\nexport default Header\n","/* eslint-disable import/no-anonymous-default-export */\nconst API_KEY = \"3e934f4bdae653045b78ae4111d915f5\";\n\nexport default {\n    \n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchMystery: `/discover/movie?api_key=${API_KEY}&with_genres=9648`,\n    fetchSciFi: `/discover/movie?api_key=${API_KEY}&with_genres=878`,\n    fetchWestern: `/discover/movie?api_key=${API_KEY}&with_genres=37`,\n    fetchAnimation: `/discover/movie?api_key=${API_KEY}&with_genres=16`,\n    fetchTV: `/discover/movie?api_key=${API_KEY}&with_genres=10770`\n\n}","import React from 'react'\nimport \"./Nav.css\";\nimport requests from './requests';\n\nfunction Nav({ setSelectedOption }) {\n    return (\n        <div className=\"nav\">\n            <h2 onClick= {() => setSelectedOption(requests.fetchTrending)} >Trending</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchTopRated)}>Top Rated</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchActionMovies)}>Action</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchComedyMovies)}>Comedy</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchHorrorMovies)}>Horror</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchRomancenMovies)}>Romance</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchMystery)}>Mystery</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchSciFi)}>Sci-fi</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchWestern)}>Western</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchAnimation)}>Animation</h2>\n            <h2 onClick= {() => setSelectedOption(requests.fetchTV)}>Movie</h2>\n\n        </div>\n    )\n}\n\nexport default Nav\n","import React, { forwardRef } from 'react'\nimport \"./VideoCard.css\";\nimport TextTruncate from \"react-text-truncate\";\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\n\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nconst VideoCard = forwardRef(({ movie }, ref) => {\n    return (\n        <div ref={ref} className=\"videoCard\">\n            <img src={`${base_url}${movie.backdrop_path || movie.poster_path}`}\n             alt=\"movie poster\" />\n             <TextTruncate\n                line=\"1\"\n                element=\"p\"\n                truncateText=\"...\"\n                text={movie.overview}\n            />\n            <h2>{movie.title || movie.original_title}</h2>\n            <p className=\"videoCard__stats\">\n                {movie.media_type && `${movie.media_type}  ●`}{\"  \"}\n                {movie.release_date || movie.first_air_date}  {\"  \"}●{\"  \"}                <ThumbUpIcon />{\"  \"}{movie.vote_count}</p>\n        </div>\n    );\n});\n\nexport default VideoCard\n","import axios from 'axios';\n\n // Base url to make requests to the movie database\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, { useState, useEffect } from \"react\";\nimport \"./Results.css\";\nimport VideoCard from \"./VideoCard\";\nimport axios from \"./axios\";\nimport FlipMove from \"react-flip-move\";\n\nfunction Results({ selectedOption }) {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(selectedOption); //to wait till we get the response from axios call\n      //console.log(request);\n      setMovies(request.data.results); // to set the value of setMovies\n      return request; //jump out of async function\n    }\n\n    fetchData();\n  }, [selectedOption]);\n\n  return (\n    <div className=\"results\">\n      <FlipMove>\n        {movies.map((movie) => (\n          <VideoCard movie={movie} key={movie.id} />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default Results;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Nav from './Nav';\nimport Results from './Results';\nimport requests from './requests';\n\nfunction App() {\n\n  const [selectedOption, setSelectedOption] = useState\n  (requests.fetchTrending);\n\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <Nav setSelectedOption={setSelectedOption} />\n\n      <Results selectedOption={selectedOption}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}